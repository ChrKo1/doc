====== Introduction to R for FLR users/developers ======

Martin Pastoors, 15/2/2006 \\
Jan Jaap Poos, 24/10/2006 \\
Ernesto Jardim, 17/01/2007 \\




===== References =====

  * The New S Language. (The “Blue” Book.) R. Becker, J. Chambers and A. Wilks.
  * Statistical Models in S. (The “White” Book.) J. Chambers and T. Hastie Eds.
  * Programming With Data. (The “Green” Book.) J. Chambers.
  * Modern Applied Statistics with S-PLUS. W. Venables and B. Ripley.
  * S Programming. W. Venables and B. Ripley.
  * [[http://www.stat.auckland.ac.nz/S-Workshop/Ihaka/lecture.pdf|S Programming Techniques (2003), Ross Ihaka]]
  * [[http://www.ci.tuwien.ac.at/Conferences/useR-2004/Keynotes/Maechler.pdf|Good Programming Pratices (2004), Martin Machler]]
  * [[http://www.insightful.com/Hesterberg/articles/EfficientSplus.txt|Efficient Programming in S-PLUS (2006), Tim Hesterberg]]

Look in the R-project home page for more information on these books and web links (http://www.r-project.org/doc/bib/R-books.html).

The R manuals are key references for R, read them as you go on your learning (http://www.stats.bris.ac.uk/R/manuals.html).



===== Installing R =====
After downloading the file to your local computer or network, double-click the icon and follow instructions on screen. Be aware that multiple versions of R can be on your system. A newer version of R does not override the previous versions that have been installed. It is therefore also possible to step back to a previous version is some scripts does not work in the newer R version. 

When you choose to install a R-shortcut on the desktop, double-click that to start the R-program. You will get into the main R screen which looks like this:

{{r-startup.gif?500}}

Note the version number of R which is in the first paragraph (in this example: version 2.2.1)

===== Installing FLR packages =====

FLR packages can be installed from different sources:  

  * from the compiled FLR packages repository
  * from local ZIP files
  * from the CVS server


==== From the compiled FLR packages repository ====

The latest versions of the compiled FLR packages can also be installed directly from a repository. To access this repository, use the R command:
<code R>
install.packages(repos = "http://flr-project.org/R")
</code>
This opens a dialog box where the different packages can be selected. After selection the packages are downloaded and installed.

==== From local ZIP files ====

Select the ''packages'' options in the main menu and choose the ''install from local zip files'' option. 

{{r-install-packages.gif?480}}

Then select the packages you want to install in R. In this example: FLCore, FLXSA and FLSTF.

{{r-install-selected-packages.gif?380}}


==== From CVS server ====

FLR packages can also be installed from their source, which is avalaiable on the CVS server. How to download a package from this server is described [[doc:help:cvs_manual|here]]. Subsequently, the package has to be built and installed, which is described [[doc:install|here]]. 






===== Starting an R session =====

R is started by clicking on the relevant icon (MSWin) or writing "R" on your console (linux). The first procedure starts R on a default directory the later starts R on the directory where you are.

One of the most common mistakes using R in MSWin is to start R using the icon and be lost on one's directory tree. In particular trying to load data or source files that are not on the working directory. To learn more about R read the [[http://cran.r-project.org/doc/manuals/R-intro.html|manual]]. To check where you are type ''getwd()''. Now define your working dir using ''setwd(c:\\mydir")''. It's a good strategy to use a low level working dir to avoid having to type long lines of code.

===== Using the installed packages =====
Installing a package in R merely makes it available on the local harddisk. If you want to use a package in a R-session, you need to load the package in memory by using the ''library'' command:

<code R>
library("FLCore")
library("FLXSA")
library("FLSTF")
</code>

**Note:** you can only install packages that are not already loaded into memory. If you are working in a R-session and a new version of e.g. FLCore comes up that you want to install, you first have to quit the R-session and start a new one. In that new R-session you can install the new FLCore package. 

To get an overview of the active libraries, type:
<code R>
library()
</code>



===== Sourcing FLR code =====

When code is under development, there may not be ready-made packages available. Nevertheless, the basic functionality of a package is usually contained in the R-source files. These can be loaded directly into the R-session, using the ''source'' command.

<code R>
source("mycode.r")
</code>



















===== R tips and tricks =====

General introductions to R can be found here: 

  * Emmanuel Paradis: [[http://cran.r-project.org/doc/contrib/Paradis-rdebuts_en.pdf|R for beginners]] (pdf)
  * Thomas Lumley: [[http://faculty.washington.edu/tlumley/Rcourse| two day course in R]] (html/pdf)
  * Quick reference card: [[http://www.rpad.org/Rpad/R-refcard.pdf]]

The following general introduction to R was developed by Philip Grosjean and could be used as a starting point for FLR users/developers.

<code R>
# set and retrieve working directory. This is the directory where R reads and stores data and scripts.
# setwd() sets the working directory where the workspace and Rhistory are stored
# note that pathname uses forward slashes or double backward slashes, rather than
# single backward slahes, this is because R is based
# on ansi C that uses \ for output control of textstrings

# getwd outputs the pathname of the current working directory
getwd()

# if we want to change it, this can be done using:
setwd("c:\\mydir")


# R is strongly vector orientated, following command creates vector a of length 5
b <- 1:5

# lenth() outputs length of vector b 
length(b)

# typing only the name of the vector outputs its values
b

# Calculations are generally performed on all elements in vector thus: power of two in all elements in vector b
b^2

# example get syntax of function call (use arg), in this case function log
# if one of the arguments is not followed by "=", then no default, in log case x is obliguatory,
# while base has default exp(1) , see output of args(log)
args(log)

# do natural log of all elements in b vector
log(b)

#other posibilities using log
log(x=b)
log(x=b, 10)
log(base=10,b)

# arguments for more complex function
args(plot.default)

# example for plot, lwd is the thickness of line used for plotting SYMBOL representing
# observation
plot(b, lwd=2)

# example code over more lines. 
log(
	10
)

# vector can also contain elements of type string: input srings in vector b
b<- c("a","b","c")
b

# for naming variables one is allowed to use digits, letters and dot, varible has to start with letter
# variables are case sensitive (as c++, unix)

# assign values to variables is preferably done by "<-" sign. This is also allowed within function
# thus in example, a is srgument to x, with value 1
log(a<-1) 

# use help and example for functions
help(log)
example(log)
?cbind

# open html help from code
help.start()

# help on non linear fitting using least squares
?nls

# return all functions, of which name contains a string
# e.g. return all functions that have "log" in name
apropos("log")

# search all workspace and packages, note that nls is already loaded
# just as several other packages
search()

# example for function that is in package that is not loaded by default
example(boot)

#load bootstraplibrary using library command, do example and 
# subsequently remove library
library(boot)
example(boot)
detach("package:boot")

#see sourcecode for function, eg boot
library(boot)
fix(boot)
detach("package:boot")

# possibilities for values
# Inf  or -Inf for infinity
# NA missing value
# NaN not a number for instance for 0/0

a<- c(3,4, NA, Inf)
a

tt <- c(1, NA, 3, 4, NA, 6, NaN)
is.na(tt)

# NaN is distint from NA
is.nan(tt)

# sum of vector a will in this case be defined as NA, since NA propagates
args(sum)

# note that na.rm will remove these and then sum will summarise all available values in vector
sum(a)
sum(a, na.rm=T)

#string manipulation, don't yet know what is done
b<- c("yes","no", "maybe")
paste("is it",b) 

paste("is it",b, sep=",")

paste("is it",b, sep=" ", collapse=", ")

# typeof() shows type of elements in vector
c <- c(TRUE, TRUE, FALSE)
typeof(c)

# true and false can be assigned by T and F

d<- c(T,T,F)

# is equal to sign is == just like c++
# is not c , you get vector with inverse of logical
!c

#subsetting vector using vector with logical values
a <- c(T, T, F, F, T)
b <-  1:5
# now the subset command, which is in vertical brackets, thus ,1 2 and 5
# are kept
b[a]

#subset such that you get all values larger than two
b[b>2]

# suset the vector by the index, so now 1 to 3
b[1:3]

#or subset vector by index, given by a list of numbers
b[c(1,2,1,3,4,1,1,5)]

#or give part of vector except for a number (in this case 3)
b[-3]

# convert vector of integer to vecor of logical (just for the example)
# I concatenated 0 to beginning of vector
b <- c(0,b)
lb <- as.logical(b)

#recycling rule when doing vector arithmetics, after third element in b, jump back to first element in b 
a <- 1:6
b <- 1:3
a + b

# Adding 2 to a numeric vector using the conventional programming approach - The slow method
x <- c(2,3,4,5)
for (i in 1:length(x)){
  x[i] <- x[i] +2
}

# Using vectorised arithmetic one can simple type - The faster method
x <- c(2,3,4,5)
x + 2

# However, beware of automatic recursion. 
a + c(2,6,6,3)

#define two-dimensional array (matrix)
a <- matrix(rnorm(16),nrow=4)
a

#subset value from matrix, or vector defined by row or column
a[2,3]
a[2,]
#number of columns or rows
a[2:3,]

# there is argument in matrix function on how the matrix is filled
# by row or by column, differences and args
a <- matrix(1:16,nrow=4)
a <- matrix(1:16,nrow=4, byrow=TRUE)

#what kind of datastructure is "a" (output tells number of rows and columns)
attributes(a)

# we can remove dimensions, getting vector rather than matrix
attr(a,"dim") <- NULL
attributes(a)
a

#reshape vector in three dimensional array, note that you cannot get out of vector bounds, this is protected
attr(a,"dim") <- c(2,4,2)
a

#create list of fish (list has more than one variable with different type 
a<- list(fish="toto",age=3, good.shape=FALSE)
a

# access fish part of "a" list, different methods (JJP: are there differences?)
a$fish
a[["fish"]]
a[[1]]

# vectors in list do need need to be of same type
a<- list(fish="toto",age=1:3, good.shape=FALSE)
a
	
#dataframe, all vectors in dataframe need to be of same length, this is more or less the sas dataset or excel sheet
#first create list with equal vector length, then make dataframe
a<- list(fish=c("toto", "toto2","toto3") ,age=1:3, good.shape= c(F,T,T))
a
b <- as.data.frame(a)
b

# one is also able to make dataframe at once. NOTE: the c in name=c("sole") allows one to give list of strings
f <- data.frame( age=1:5, name=c("sole","plaice","cod","turbot","brill"))

#substract from dataframe (you get vector), different examples:
b$age
b[,2]	
b[2:3,]	

# get class 
class(b)

#give comment to list
attr(b,"rem") <-"This is my dataframe"

#what does unclass do?
unclass(b)

# show and edit dataframe b as spreadsheet
fix(b)

#export dataframe, by default if no path, then file is put in setwd() dir
write.table(b, file="c:\\mydir\\b.txt")
args(write.table)

#import data.frame from textfile on disk
d<- read.table(file="c:\\mydir\\b.txt")
args(read.table)

#many other forms for reading data  (e.g. .csv or delimited) see:
?read.table

# summary statistics
a<- rnorm(100)
mean(a)
sd(a)
plot(a)
hist(a)
boxplot(a)
boxplot(a, col="red")
qqnorm(a)
qqline(a)

# median and first and quarter of data
fivenum(a)

# stem and leave plot
stem(a)

# example of possibility
data(faithful)
attach(faithful)
hist(eruptions, seq(1.6, 5.2, 0.2), prob=T, col=7)
lines(density(eruptions,bw=0.1),lwd=2,col=4)
rug(eruptions)


#another dataset, plot is here adapted for the kind of dataset, b setting method
# in this case, nottem is a timeseries dataset. This is very similar to object 
# oriented programming in C++, (this is probably class object with both data and 
# functions
data(nottem)
plot(nottem)

#however, by defining plot.default, R can be forced to use default plot method
plot.default(nottem)

# using source you can "batch" a script running  it completely, NOTE this is fake reference
# to script file
source("C:\\mydir\\myscript.R")

#using seq() or by using (1:6)/6 you an make stepsize smaller
?seq
a <- seq(0,10, by=0.5)
b <- rnorm(length(a))
a
b

# define new function
# A function comprises 2 main components: the function arguments and a function body.
# The function body contains error trapping, the main processes of the function and the return statement.
 
cube <- function(x, na.rm=TRUE)
{
	if (na.rm == TRUE)  x <- x[!is.na(x)]
	return(x^3)
}
a <- 1:5
cube(a)
</code>


===== Objects and classes in practice =====




===== Using Apply and Sweep =====


<code R>

# Loops can be replaced by a few calls to atomic computations.
# This not only speeds up your code but helps conceptually by moving towards a "whole object" view.

kk <- array(rnorm(120), dim=c(8,5,3))
apply(kk, 2, mean)

apply(kk, c(2,3), mean)

# A family of apply functions exist to perform actions on different types of R classes. 
# See lapply for lists, tapply for dataframes and other incarnations sapply rapply mapply etc.

# Sweep can be used very effectively with apply
# This example calculates the mean across the first dimension and subtracts it from each 
# element of the array

kk <- array(runif(12), dim=c(3,4))
sweep(kk, 1, apply(kk, 1, mean), "-")


</code>

===== Plotting with lattice =====

Due to the multidimensionality of the fisheries data, reflected on the multidimensionality of ''FLQuant'', FLR plots are mostly based on the lattice plots. This plots are //conditioning plots// which use the S formula syntax to define conditioning variables. For example if a dataframe has 3 variables, a,b and c, one can use the formula ''a~b|c'' to plot a against b conditioned on c. The result will be matrix of plots a~b for each value of c. If the conditioning variable is not set, the plot matrix will have a single plot. Lattice is a very powerful toolset but complex, see the lattice manual for more info.

<code R>
# load library and data
require(lattice)
data(iris)
# see the first rows of data
head(iris)
# now plot
xyplot(Sepal.Length~Sepal.Width, data=iris)
# now conditioning on Species
xyplot(Sepal.Length~Sepal.Width|Species, data=iris)
# it is possible to use more than one conditioning variable (note the recycling of v)
v <- rep(letters[1:2],rep(25,2))
xyplot(Sepal.Length~Sepal.Width|Species*v, data=iris)
# play with the several plots provided by lattice
dotplot(Sepal.Length~Sepal.Width|Species*v, data=iris)
barchart(Sepal.Length~Sepal.Width|Species*v, data=iris)
bwplot(Sepal.Length~Species|v, data=iris)
</code> 







===== Object Oriented Programming and S4 =====

This section is a short (very short) and dirty (very dirty) introduction to OOP and its implementation in R, known by S4.

For OOP please read the following references and do your best to understand what it is. We'll build this section in the future (hopefully).

  * [[http://en.wikipedia.org/wiki/Object-oriented_programming|Wikipedia definition]]
  * [[http://www.stat.auckland.ac.nz/S-Workshop/Gentleman/container.pdf|Object Oriented Programming II (2001) by Robert Gentleman]]
  * [[http://agenda.ictp.trieste.it/agenda/current/askArchive.php?categ=a01167&id=a01167&ifd=12487&down=1&type=lecture_notes|Introducing to Object-Oriented Programming (2002) by Olexiy Tykhomyrov]]

For S4 read the following references. We'll build this section in the future (hopefully).

  * [[http://www.omegahat.org/RSMethods/Intro.pdf|Classes and Methods in the S Language (2001) by John M. Chambers]]
  * [[http://www.stat.auckland.ac.nz/S-Workshop/Gentleman/S4Objects.pdf|S4 Classes in 15 pages, more or less (2003) by Robert Gentleman]]
  * [[http://cran.r-project.org/doc/Rnews/Rnews_2004-1.pdf|Programmers' Niche: A Simple Class, in S3 and S4 (2004) by Thomas Lumley]]
  * [[http://www.ci.tuwien.ac.at/Conferences/useR-2004/Keynotes/Leisch.pdf|S4 Classes and Methods (2004) by Friedrich Leisch]]
  * [[http://www.stat.auckland.ac.nz/S-Workshop/Gentleman/Methods.pdf|Object Oriented Programming in S-PLUS (2003) by Robert Gentleman]]
  * [[http://developer.r-project.org/howMethodsWork.pdf|How S4 Methods Work (2006) by John Chambers]]

